#!/bin/bash

set -euo pipefail

# Config
device="$(uname -m)"
repo="zorp-corp/nockchain"
binary_name="nockchaind"
binary_path="$HOME/.local/bin/$binary_name"
data_dir="$HOME/.nock"
assets_dir="$data_dir/assets"

# Create required directories
mkdir -p "$HOME/.local/bin"
mkdir -p "$assets_dir"
export PATH="$HOME/.local/bin:$PATH"

# Detect architecture
arch="$(uname -m)"
case "$arch" in
    x86_64) arch="amd64" ;;
    aarch64) arch="arm64" ;;
    *) echo "Unsupported architecture: $arch"; exit 1 ;;
esac

# Download the binary
download_url="https://github.com/$repo/releases/latest/download/$binary_name-linux-$arch"
echo "Downloading $binary_name from $download_url..."
curl -L "$download_url" -o "$binary_path"
chmod +x "$binary_path"

# Validate it's a real executable
if ! file "$binary_path" | grep -q "ELF"; then
  echo "‚ùå Downloaded file is not a valid Linux binary."
  cat "$binary_path" | head -n 10
  exit 1
fi

echo "$binary_name has been installed to $binary_path"

# Generate dummy .jam files
for file in wal.jam miner.jam dumb.jam; do
    path="$assets_dir/$file"
    if [ ! -f "$path" ]; then
        echo "Creating dummy $file..."
        cat <<EOF > "$path"
::  %$file
:-  %noun  ~
==  [%ok %dummy]
EOF
    fi
done

# Init the node
echo "Initializing $binary_name..."
"$binary_name" init

# Optional: Start the node
# echo "Starting $binary_name..."
# exec "$binary_name" start
